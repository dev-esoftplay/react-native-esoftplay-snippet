{
	/*
	// Place your snippets for Babel JavaScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Masmun Create DB class": {
		"prefix": "mdbcreate",
		"body": [
			"import Helper from 'react-native-esoftplay-db';",
			"",
			"",
			"export default class ${1:dbname} extends Helper {",
			"",
			"\t/* tablename */",
			"\tstatic table = '${1:dbname}'",
			"",
			"\t/* fieldname */",
			"\tstatic id = 'id'",
			"\tstatic title = \"title\";",
			"\tstatic intro = \"intro\";",
			"\tstatic description = \"description\";",
			"\tstatic image = \"image\";",
			"\tstatic created = \"created\";",
			"\tstatic url = \"url\";",
			"",
			"\tsql = \"CREATE TABLE IF NOT EXISTS '\" + ${1:dbname}.table + \"' (\" + this.getSQLFormat() + \")\"",
			"",
			"\tconstructor() {",
			"\t\tsuper();",
			"\t\tthis.init(${1:dbname}.table, this.sql)",
			"\t}",
			"",
			"\t/* return fieldname */",
			"\tgetColumn() {",
			"\t\treturn [",
			"\t\t\t${1:dbname}.id,",
			"\t\t\t${1:dbname}.title,",
			"\t\t\t${1:dbname}.intro,",
			"\t\t\t${1:dbname}.description,",
			"\t\t\t${1:dbname}.image,",
			"\t\t\t${1:dbname}.created,",
			"\t\t\t${1:dbname}.url",
			"\t\t]",
			"\t}",
			"}"
		],
		"description": "Create DB extends DBHelper"
	},
	"Masmun db Get All": {
		"prefix": "mdbgetall",
		"body": [
			"${1:db}.getAll([fieldname1, fieldname2], [argument1, argument2], orderBy, limit, offset, groupBy, (queryResult)=>{ })"
		],
		"description": "function db.getAll()"
	},
	"Masmun db Get Row": {
		"prefix": "mdbgetrow",
		"body": [
			"${1:db}.getRow(id, [fieldname1,fieldname2], [argument1, argument2], (queryResult)=>{})"
		],
		"description": "function db.getRow()"
	},
	"Config Console": {
		"prefix": "cc",
		"body": [
			"configConsole(${1:log})"
		],
		"description": "function config.console()"
	},
	"Masmun Create Class": {
		"prefix": "mcc",
		"body": [
			"import React, { Component } from 'react';",
			"import tpl from './${2:tpl}.jsx';",
			"",
			"export default class ${1:className} extends Component {",
			"\tstate = {",
			"",
			"\t}",
			"",
			"\trender = () => tpl(this);",
			"}",
		],
		"description": ""
	},
	"Masmun Tpl": {
		"prefix": "mtpl",
		"body": [
			"import React from 'react';",
			"import { View } from 'react-native';",
			"/* use parent to replace this */",
			"const tpl = (parent) => {",
			"\treturn (",
			"\t\t<View style={{ flex: 1 }}>",
			"",
			"\t\t</View>",
			"\t);",
			"}",
			"export default tpl;",
		],
		"description": ""
	},
	"Masmun Create Redux Class": {
		"prefix": "mcr",
		"body": [
			"import React, { Component } from 'react';",
			"import { connect } from 'react-redux';",
			"import tpl from './${2:tpl}.jsx';",
			"",
			"class ${1:className} extends Component {",
			"/* ------START REDUX------ */",
			"\tstatic initState = {",
			"",
			"\t}",
			"\tstatic reducer = (state = ${1:className}.initState, action) => {",
			"\t\tswitch (action.type) {",
			"\t\t\tcase 'action':",
			"",
			"\t\t\t\tbreak;",
			"\t\t\tdefault:",
			"\t\t\t\treturn state",
			"\t\t}",
			"\t}",
			"\tstatic action = {",
			"",
			"\t}",
			"\tstatic mapStateToProps = (state) => {",
			"\t\treturn {",
			"\t\t\tprops: state",
			"\t\t}",
			"\t}",
			"",
			"/* ------START COMPONENT------- */",
			"",
			"",
			"\tstate = {",
			"",
			"\t}",
			"",
			"\trender = () => tpl(this);",
			"}",
			"",
			"export default connect(${1:className}.mapStateToProps)(${1:className});",
		],
		"description": ""
	}
}
